// @flow
// @see https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet

interface gas$Spreadsheet$Spreadsheet {
  addEditor(emailAddress: string): gas$Spreadsheet$Spreadsheet;
  addEditor(user: gas$User): gas$Spreadsheet$Spreadsheet;
  addEditors(emailAddresses: string[]): gas$Spreadsheet$Spreadsheet;
  addMenu(name: string, subMenus: Object[]): void;
  addViewer(emailAddress: string): gas$Spreadsheet$Spreadsheet;
  addViewer(user: gas$User): gas$Spreadsheet$Spreadsheet;
  addViewers(emailAddresses: string[]): gas$Spreadsheet$Spreadsheet;
  appendRow(rowContents: Object[]): gas$Spreadsheet$Sheet;
  autoResizeColumn(columnPosition: number): gas$Spreadsheet$Sheet;
  copy(name: string): gas$Spreadsheet$Spreadsheet;
  deleteActiveSheet(): gas$Spreadsheet$Sheet;
  deleteColumn(columnPosition: number): gas$Spreadsheet$Sheet;
  deleteColumns(columnPosition: number, howMany: number): void;
  deleteRow(rowPosition: number): gas$Spreadsheet$Sheet;
  deleteRows(rowPosition: number, howMany: number): void;
  deleteSheet(sheet: gas$Spreadsheet$Sheet): void;
  duplicateActiveSheet(): gas$Spreadsheet$Sheet;
  getActiveCell(): gas$Spreadsheet$Range;
  getActiveRange(): gas$Spreadsheet$Range;
  getActiveSheet(): gas$Spreadsheet$Sheet;
  getAs(contentType: gas$ContentType): gas$Blob;
  getBlob(): gas$Blob;
  getColumnWidth(columnPosition: number): number;
  getDataRange(): gas$Spreadsheet$Range;
  getEditors(): gas$User[];
  getFormUrl(): string;
  getFrozenColumns(): number;
  getFrozenRows(): number;
  getId(): string;
  getLastColumn(): number;
  getLastRow(): number;
  getName(): string;
  getNamedRanges(): gas$Spreadsheet$NamedRange[];
  getNumSheets(): number;
  getOwner(): gas$User;
  getProtections(type: gas$Spreadsheet$ProtectionType): gas$Spreadsheet$Protection[];
  getRange(a1Notation: string): gas$Spreadsheet$Range;
  getRangeByName(name: string): gas$Spreadsheet$Range;
  getRowHeight(rowPosition: number): number;
  getSheetByName(name: string): gas$Spreadsheet$Sheet;
  getSheetId(): number;
  getSheetName(): string;
  getSheetValues(startRow: number, startColumn: number, numRows: number, numColumns: number): Object[][];
  getSheets(): gas$Spreadsheet$Sheet[];
  getSpreadsheetLocale(): string;
  getSpreadsheetTimeZone(): string;
  getUrl(): string;
  getViewers(): gas$User[];
  hideColumn(column: number): void;
  hideRow(row: number): void;
  insertColumnAfter(afterPosition: number): gas$Spreadsheet$Sheet;
  insertColumnBefore(beforePosition: number): gas$Spreadsheet$Sheet;
  insertColumnsAfter(afterPosition: number, howMany: number): gas$Spreadsheet$Sheet;
  insertColumnsBefore(beforePosition: number, howMany: number): gas$Spreadsheet$Sheet;
  insertImage(blob: gas$Blob, column: number, row: number): void;
  insertImage(blob: gas$Blob, column: number, row: number, offsetX: number, offsetY: number): void;
  insertImage(url: string, column: number, row: number): void;
  insertImage(url: string, column: number, row: number, offsetX: number, offsetY: number): void;
  insertRowAfter(afterPosition: number): gas$Spreadsheet$Sheet;
  insertRowBefore(beforePosition: number): gas$Spreadsheet$Sheet;
  insertRowsAfter(afterPosition: number, howMany: number): gas$Spreadsheet$Sheet;
  insertRowsBefore(beforePosition: number, howMany: number): gas$Spreadsheet$Sheet;
  insertSheet(): gas$Spreadsheet$Sheet;
  insertSheet(sheetIndex: number): gas$Spreadsheet$Sheet;
  insertSheet(sheetIndex: number, options: Object): gas$Spreadsheet$Sheet;
  insertSheet(options: Object): gas$Spreadsheet$Sheet;
  insertSheet(sheetName: string): gas$Spreadsheet$Sheet;
  insertSheet(sheetName: string, sheetIndex: number): gas$Spreadsheet$Sheet;
  insertSheet(sheetName: string, sheetIndex: number, options: Object): gas$Spreadsheet$Sheet;
  insertSheet(sheetName: string, options: Object): gas$Spreadsheet$Sheet;
  moveActiveSheet(pos: number): void;
  removeEditor(emailAddress: string): gas$Spreadsheet$Spreadsheet;
  removeEditor(user: gas$User): gas$Spreadsheet$Spreadsheet;
  removeMenu(name: string): void;
  removeNamedRange(name: string): void;
  removeViewer(emailAddress: string): gas$Spreadsheet$Spreadsheet;
  removeViewer(user: gas$User): gas$Spreadsheet$Spreadsheet;
  rename(newName: string): void;
  renameActiveSheet(newName: string): void;
  setActiveRange(range: gas$Spreadsheet$Range): gas$Spreadsheet$Range;
  setActiveSelection(range: gas$Spreadsheet$Range): gas$Spreadsheet$Range;
  setActiveSelection(a1Notation: string): gas$Spreadsheet$Range;
  setActiveSheet(sheet: gas$Spreadsheet$Sheet): gas$Spreadsheet$Sheet;
  setColumnWidth(columnPosition: number, width: number): gas$Spreadsheet$Sheet;
  setFrozenColumns(columns: gas$Spreadsheet$Range): void;
  setFrozenRows(rows: gas$Spreadsheet$Range): void;
  setNamedRange(name: string, range: gas$Spreadsheet$Range): void;
  setRowHeight(rowPosition: number, height: number): gas$Spreadsheet$Sheet;
  setSpreadsheetLocale(locale: string): void;
  setSpreadsheetTimeZone(timezone: string): void;
  show(userInterface: gas$HtmlOutput): void;
  sort(columnPosition: number): gas$Spreadsheet$Sheet;
  sort(columnPosition: number, ascending: boolean): gas$Spreadsheet$Sheet;
  toast(msg: string): void;
  toast(msg: string, title: string): void;
  toast(msg: string, title: string, timeoutSeconds: number): void;
  unhideColumn(column: gas$Spreadsheet$Range): void;
  unhideRow(row: gas$Spreadsheet$Range): void;
  updateMenu(name: string, subMenus: Object[]): void;
}
